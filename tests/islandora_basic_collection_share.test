<?php

/**
 * @file
 * Attempts to share a collection object.
 */

class IslandoraShareCollectionTestCase extends IslandoraCollectionWebTestCase {

  /**
   * Get test information.
   *
   * @see IslandoraWebTestCase::getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'Share Object',
      'description' => 'Generates two random collections, sharing one and asserting that it now shows up in two places.',
      'group' => 'Islandora Basic Collection',
    );
  }

  /**
   * Sets up the testing environment.
   *
   * @see IslandoraWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp(array(
      'islandora_basic_collection',
    ));
  }

  /**
   * Attempts to share a collection with another collection.
   */
  public function testShareObject() {
    $user = $this->drupalCreateUser(array(
      'view fedora repository objects',
      'create child collection',
      'ingest fedora objects',
      'delete fedora objects and datastreams',
      'add fedora datastreams',
      'migrate collection members',
    ));
    $this->drupalLogin($user);

    // Let's create some random collections.
    $collection_1 = 'islandora:' . $this->randomName(16);
    $collection_2 = 'islandora:' . $this->randomName(16);
    // Rather than attempt the nasty business of flipping through pages of
    // objects to find our test collections, we're just going to append 01_ and
    // 02_ to the start of the first object in the root collection.
    $root_objects = islandora_basic_collection_get_objects(islandora_object_load('islandora:root'));
    $label_suffix = $root_objects[0]['title']['value'];
    $collection_1_label = '01_' . $label_suffix;
    $collection_2_label = '01_' . $label_suffix;
    $this->createTestCollection($collection_1_label, 'islandora:collectionCModel', $collection_1);
    $this->createTestCollection($collection_2_label, 'islandora:collectionCModel', $collection_2);

    // Now try to add collection 2 to collection 1.
    $path = "islandora/object/islandora:root/manage/collection";
    $edit = array(
      "collection" => $collection_1,
      "children[{$collection_2}]" => TRUE,
    );
    $this->drupalPost($path, $edit, 'Share selected objects', array(), array(), 'islandora-basic-collection-share-children-form');

    // First, check that Collection 2 shows up in Collection 1.
    $this->drupalGet("islandora/object/{$collection_1}");
    $this->assertLink($collection_2_label, 0, 'Shared object shows up in second collection', 'Islandora');
    // Then, check that Collection 2's RELS-EXT is properly made.
    $rels_ext = islandora_object_load($collection_2)['RELS-EXT']->content;
    $this->assertTrue(strpos($rels_ext, '<fedora:isMemberOfCollection rdf:resource="info:fedora/islandora:root"></fedora:isMemberOfCollection>'), 'RELS-EXT datastream asserts that shared object isMemberOfCollection islandora:root', 'Islandora');
    $this->assertTrue(strpos($rels_ext, "<fedora:isMemberOfCollection rdf:resource=\"info:fedora/{$collection_1}\"></fedora:isMemberOfCollection>"), "RELS-EXT datastream asserts that shared object isMemberOf shared collection {$collection_1}", 'Islandora');

    // Get rid of the collections.
    $this->deleteTestCollection($collection_1);
    $this->deleteTestCollection($collection_2);
  }
}
