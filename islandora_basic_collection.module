<?php

/*
 * @file
 * islandora_basic_collection.module
 *
 * an Islandora module to handle basic image cmodels
 *
 *
 * This file is part of Islandora.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the program.  If not, see <http ://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_menu().
 * we need some standard entry points so we can have consistent urls for different Object actions
 */
function islandora_basic_collection_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manage/collection'] = array(
    'title' => 'Collection',
    'page callback' => 'islandora_basic_collection_manage_object',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_basic_collection_access',
    'access arguments' => array(2),
  );

  $items['admin/islandora/basic_collection'] = array(
    'title' => 'Core collection',
    'description' => 'Configure the core Islandora collection functionality.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_basic_collection_admin'),
    'file' => 'admin/islandora_basic_collection.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  /* an example of adding a tab for view
    $items['islandora/object/%/view/collection'] = array(
    'title' => 'Collection View',
    'page callback' => 'islandora_basic_collection_view1',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_basic_collection_access',
    'access arguments' => array(2),
    ); */

  return $items;
}

function islandora_basic_collection_init() {
  if (path_is_admin(current_path())) {
    drupal_add_css(drupal_get_path('module', 'islandora_basic_collection') . '/css/islandora_basic_collection.admin.css');
  }
}

/**
 * This function is where we create the view for the related menu item
 * @param type $object_id
 * @return type
 */
function islandora_basic_collection_manage_object($object) {

  module_load_include('inc', 'islandora_basic_collection', 'includes/collection_management');
  module_load_include('inc', 'islandora_basic_collection', 'includes/collection_manager_table');
  module_load_include('inc', 'islandora_basic_collection', 'includes/delete_collection');
  module_load_include('inc', 'islandora_basic_collection', 'includes/move_collection');
  module_load_include('inc', 'islandora_basic_collection', 'includes/child_collection');
  module_load_include('inc', 'islandora_basic_collection', 'includes/manage_policies');
  module_load_include('inc', 'islandora_basic_collection', 'includes/change_content_models');

  $form = array();

  $form['collection_manager'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 0,
    '#prefix' => '',
  );

  $form['collection_manager']['create_child_collection'] = array(
    '#title' => t('Create child collection'),
    '#type' => 'fieldset',
  );

  $form['collection_manager']['create_child_collection']['form'] = drupal_get_form('islandora_create_child_collection_form', $object);

  $form['collection_manager']['manage_policies'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage collection policies'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['collection_manager']['manage_policies']['form'] = drupal_get_form('islandora_manage_policies_form', $object);

  $form['collection_manager']['change_content_models'] = array(
    '#type' => 'fieldset',
    '#title' => t('Change content models'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['collection_manager']['change_content_models']['form'] = drupal_get_form('islandora_change_content_models_form', $object);

  $form['collection_manager']['migrate_members'] = array(
    '#type' => 'fieldset',
    '#title' => t('Migrate members'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['collection_manager']['migrate_members']['form'] = drupal_get_form('islandora_collection_migrate_form', $object);

  $form['collection_manager']['delete_members'] = array(
    '#type' => 'fieldset',
    '#title' => t('Delete members of this collection'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['collection_manager']['delete_members']['form'] = drupal_get_form('islandora_collection_deletion_form', $object);

  // Pass the form around any modules that are interested so that they can add their own collection management functions.
  module_invoke_all('islandora_collection_manager', $form);

  return $form;
}

/**
 * determines whether or not to show this modules manage tab
 * @global object $user
 * @param string $object_id
 * @return boolean
 */
function islandora_basic_collection_access($fedora_object) {
  if (!isset($fedora_object)) {
    return FALSE;
  }
  $manage = user_access(FEDORA_MANAGE);

  // Allow something of an early exit, if the user does not have management
  //   permissions.
  if ($manage) {
    $models = $fedora_object->models;

    $types = islandora_types();
    foreach (array_intersect_key($types, drupal_map_assoc($models)) as $model => $info) {
      // XXX:  If one of the content models of the given object makes an
      //   assertion about this module let's make the assumption that we should
      //   allow use of the collection manager.
      if (isset($info['islandora_basic_collection'])) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_theme().
 */
function islandora_basic_collection_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_basic_collection' => array(
      'file' => 'theme/islandora_basic_collection.theme.inc',
      'template' => 'theme/islandora-basic-collection',
      // We can add PIDs to the end of this pattern in our preprocess function
      //   and templates will be able to have have a pid appended to the
      //   template name to overide a template on a per object basis.
      // An example template might be named
      //   "islandora-basic-collection--islandora-27.tpl.php".
      'pattern' => 'islandora_basic_collection__', 
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_basic_collection_grid' => array(
      'file' => 'theme/islandora_basic_collection.theme.inc',
      'template' => 'theme/islandora-basic-collection-grid',
      'pattern' => 'islandora_basic_collection_grid__',
      'variables' => array('islandora_object' => NULL, 'collection_results' => NULL),
    ),
    'islandora_basic_collection_wrapper' => array(
      'file' => 'theme/islandora_basic_collection.theme.inc',
      'template' => 'theme/islandora-basic-collection-wrapper',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_basic_collection_management_form_table' => array(
      'file' => 'theme/islandora_basic_collection.theme.inc',
      'arguments' => array('element' => NULL),
      'file' => 'includes/collection_manager_table.inc',
    ),
  );
}

/**
 * Implements hook_islandora_type_info().
 */
function islandora_basic_collection_islandora_type_info() {
  $types = array(
    'islandora:collectionCModel' => array(
      'islandora_basic_collection' => array(
        ISLANDORA_VIEW_HOOK => variable_get('islandora_basic_collection_use_for_default_tab', TRUE),
      ),
    ),
  );
  return $types;
}

/**
 * Implements hook_islandora_view_object().
 */
function islandora_basic_collection_islandora_view_object($object, $user) {
  $output = theme('islandora_basic_collection_wrapper', array(
    'islandora_object' => $object,
  ));
  return array('Collection View' => $output);
}

/**
 * A wrapper to retrieve an object from Fedora.
 * @param string $object_id
 * @return null|\FedoraObject 
 */
function islandora_basic_collection_get_object($object_id) {
  return islandora_object_load($object_id);
}

/**
 * Get objects associated with this object.
 *
 * Currently, we are only concerned with the with isMemberOf and
 * isMemberOfCollection relationships.
 * 
 * @param FedoraObject $object
 * @param string $page_number
 * @param string $page_size
 * @return array
 */
function islandora_basic_collection_get_objects($object, $page_number = 1, $page_size = 5) {
  $query = 'select $object $title $content from <#ri>
             where ($object <fedora-model:label> $title
             and $object <fedora-model:hasModel> $content
             and ($object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $object->id . '>
             or $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $object->id . '>)
             and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
             minus $content <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
             order by $title';
  $query_array = array(
    'query' => $query,
    'type' => 'itql',
    'pid' => $object->id,
    'page_size' => $page_size,
    'page_number' => $page_number
  );
  drupal_alter('islandora_basic_collection_query', $query_array);
  try {
    $results = $object->repository->ri->query($query_array['query'], $query_array['type']);
  } catch (Exception $e) {
    drupal_set_message(t('Islandora Error getting related objects for %s', array('%s' => $object->id)), 'error');
    return"";
  }
  return $results;
}

function islandora_basic_collection_islandora_ingest_get_information($models, $object) {
  if (in_array('islandora:collectionCModel', $models) && isset($object['COLLECTION_POLICY'])) {
    try {
      module_load_include('inc', 'islandora_basic_collection', 'includes/CollectionPolicy');
      $return = array();
      $policy = new CollectionPolicy($object['COLLECTION_POLICY']->content);
      $return['models'] = $policy->getContentModels();
      $return['relationship'] = $policy->getRelationship();

      return $return;
    } catch (Exception $e) {}
  }
}

function islandora_basic_collection_islandora_undeletable_datastreams($models) {
  if(in_array('islandora:collectionCModel', $models)) {
    if(variable_get('islandora_basic_collection_disable_collection_policy_delete', TRUE)) {
      return array('COLLECTION_POLICY');
    }
  }
}
